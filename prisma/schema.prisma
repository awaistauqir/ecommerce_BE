// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
// prisma/schema.prisma
model ProductCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[] @relation("ProductToCategory")

 
}
model Product {
  id          String           @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  categoryId  String           // Non-nullable field
  category    ProductCategory  @relation("ProductToCategory", fields: [categoryId], references: [id])
  createdById String           // Non-nullable field
  createdBy   User             @relation(fields: [createdById], references: [id])
}
model User{
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  phone String @unique
  password    String
  isEmailVerified Boolean @default(false)
  isActive Boolean @default(false)
  verificationToken String?
  passwordResetToken String?
  passwordResetTokenExpiresAt DateTime?
  passwordChangedAt DateTime?
  roles       Role[]    @relation("UserRoles") // User has many roles
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @updatedAt
  deletedAt   DateTime?
  Product     Product[]
}
model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  users       User[]    @relation("UserRoles")
}
